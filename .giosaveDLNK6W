/*
 * Malloclab explicit list implementation
 *
 * Our explicit free list implementation uses the head and 
 * footers to store pointers to the next and previous free blocks.
 * 
 * The free list is split into segregated lists to improve performance.
 *
 * Each segregated list will store free blocks in order from smallest to 
 * largest. In this way we search for the best fit to improve memory utility.
 * 
 * global variables minList and numFree are added to speed up searches.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "group371",
    /* First member's full name */
    "Eric Lewis",
    /* First member's SLO (@cs.vt.edu) email address*/
    "airshp12@cs.vt.edu",
    /* Second member's full name (leave blank if none) */
    "Hang Lin",
    /* Second member's SLO (@cs.vt.edu) email address*/
    "Lin1412@cs.vt.edu"
};



/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)


#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

static char *heap_listp = NULL;
int minList = 0;             // keeps track of the list number for the free list containing the first free block  
int numFree = 0;             // Keeps track of the number of free blocks            
static void *extend_heap(size_t words);
static void *coalesce(void *bp);
static void add_free_list(void *bp);
static void remove_free_list(void *bp);
static void *find_fit(size_t asize);
static void place(void *bp, size_t asize);
//static int mm_check(void);

/////////// Macros from the book /////////////////

/* Basic constants and macros */
 #define WSIZE 4 /* Word and header/footer size (bytes) */
 #define DSIZE 8 /* Double word size (bytes) */
 #define CHUNKSIZE (1<<12) /* Extend heap by this amount (bytes) */

 #define MAX(x, y) ((x) > (y)? (x) : (y))

 /* Pack a size and allocated bit into a word */
 #define PACK(size, alloc) ((size) | (alloc))

 /* Read and write a word at address p */
 #define GET(p) (*(unsigned int *)(p))
 #define PUT(p, val) (*(unsigned int *)(p) = (val))

 /* Read the size and allocated fields from address p */
 #define GET_SIZE(p) (GET(p) & ~0x7)
 #define GET_ALLOC(p) (GET(p) & 0x1)

 /* Given block ptr bp, compute address of its header and footer */
 #define HDRP(bp) ((char *)(bp) - WSIZE)
 #define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

 /* Given block ptr bp, compute address of next and previous blocks */
 #define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
 #define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/* 
 * mm_init initializes the initial heap area. It also creates 84 words for the 
 * segregated lists. 
 *
 * return -1 if the allocation fails, 0 otherwise
 */
int mm_init(void)
{
        // initialize heap
        if ((heap_listp = mem_sbrk(88*WSIZE)) == (void *)-1)
                return -1;

        PUT(heap_listp, 0); 

        PUT(heap_listp + (1*WSIZE), PACK(43*DSIZE, 1)); 

        // initialize 84 segregated free lists
        int i;
        for(i = 2; i < 86; i++) {
                PUT(heap_listp + (i*WSIZE), 0); 
        }

        // prologue footer
        PUT(heap_listp + (86*WSIZE), PACK(43*DSIZE, 1));

        // epilogue header
        PUT(heap_listp + (87*WSIZE), PACK(0, 1));

        // start by pointing to the prologue
        heap_listp += (2*WSIZE);


        // start with no free blocks
        minList = 100; 
        numFree = 0;   

        /* Extend the empty heap with a free block with size CHUNKSIZE */
        if (extend_heap(CHUNKSIZE/WSIZE) == NULL)
                return -1;

            return 0; 
}



/*
 * extends the size of the heap by words words.
 *
 * Return -1 if heap cant be extended, 0 otherwise;
 */
 static void *extend_heap(size_t words)
 {
        char *bp;
        size_t size;

        // Must extend by an even number to maintain allignment
        size = (words % 2) ? (words+1) * WSIZE : words * WSIZE;

        if ((long)(bp = mem_sbrk(size)) == -1)
                return NULL;

        // set the free block header and footer
        PUT(HDRP(bp), PACK(size, 0)); 
        PUT(FTRP(bp), PACK(size, 0)); 

        // set epilogue header
        PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));

        // Combine consecutive free blocks
        bp = coalesce(bp);

        //mm_check();
        
        return bp;
 }
 
 
/* 
 * Search the free list for for a large enough free block. If found then place
 * it. If not found then allocate size for it. Extend the heap if necessary.
 *
 * Return NULL if either size == 0 or heap is full, 
 * otherwise return a pointer to the new block.
 */
void *mm_malloc(size_t size)
{
        size_t asize; 
        size_t extendsize; 
        char *bp;

        // Dont waste time allocating nothing
        if (size == 0)
                return NULL;

        // Get an adjusted size so that we conform to allignment
        if (size <= DSIZE)
                asize = 2*DSIZE;
        else
                asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);

        // search free list for a fiting block
        if ((bp = find_fit(asize)) != NULL) {
                place(bp, asize);
                return bp;
        }

        // Extend heap if necessary
        extendsize = MAX(asize,CHUNKSIZE);
        if ((bp = extend_heap(extendsize/WSIZE)) == NULL)
                return NULL;
        
        //place in new memory.  
        place(bp, asize);
        return bp;

}


/* 
 * Searches the free list for a free block lareg enough for the requesting 
 * malloc call. Start at the minimum free list that is lareg enough to 
 * save time.
 */
 static void *find_fit(size_t asize)
 {
         void *bp;
         
         //no free blocks
         if(numFree == 0)
                 return NULL;
         
         // calculate where the minimum free list large enough is
         int minlistLocal = asize / 50;
         
         if(minlistLocal > 83)
                 minlistLocal = 83; 
        
         if(minlistLocal < minList)
                 minlistLocal = minList;
         
         //Loop through the remaining free lists starting at min list.  
         for(; minlistLocal < 84; minlistLocal++){
                int i = 0;
                // look for a large enough block
                for (bp = (char *)GET(heap_listp + (minlistLocal * WSIZE)); (int)bp != 0 && GET_SIZE(HDRP(bp)) > 0 && i < 250; bp = (char *)GET(bp+WSIZE)) {
                        if (!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(HDRP(bp)))) {
                                //found one
                                return bp;
                        }
                        i++;
                }
         }
         //if no fits wer found return null
         return NULL;
 }
 
/* 
 * places a block into a block pointer. split the block into an allocated
 * and free block if it is large enough to accomodate both. That block will then 
 * be removed from free list.
 */ 
 static void place(void *bp, size_t asize)
 {
         void *nxt_bp;
         
         size_t csize = GET_SIZE(HDRP(bp));

         //Large enough to hold bp AND a free block 
         if ((csize - asize) >= (2*DSIZE)) {
                 
                 // remove from free list
                 remove_free_list(bp);
                 
                 
                 PUT(HDRP(bp), PACK(asize, 1));
                 PUT(FTRP(bp), PACK(asize, 1));
                 

                 nxt_bp = NEXT_BLKP(bp);
                 
                 PUT(HDRP(nxt_bp), PACK(csize-asize, 0));
                 PUT(FTRP(nxt_bp), PACK(csize-asize, 0));
                                  
                 //ADD new free block to free list
                 add_free_list(nxt_bp);
         }
         
         //not large enough for a free block to remain.
         else {
                 //set to allocated 
         